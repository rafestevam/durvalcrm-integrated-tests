---
- name: Setup DurvalCRM Environment
  hosts: all
  vars:
    compose_file_path: "{{ playbook_dir }}/../files/compose.yml"
    realm_file_path: "{{ playbook_dir }}/../files/realm-durvalcrm.json"
    working_directory: "/tmp/durvalcrm"

  tasks:
    - name: Update operating system packages
      become: yes
      package:
        name: "*"
        state: latest
      when: ansible_os_family == "RedHat" or ansible_os_family == "Debian"

    - name: Install Podman on RedHat/CentOS/Fedora
      become: yes
      package:
        name:
          - podman
          - podman-compose
        state: present
      when: ansible_os_family == "RedHat"

    - name: Install Podman on Debian/Ubuntu
      block:
        - name: Update apt cache
          become: yes
          apt:
            update_cache: yes

        - name: Install required packages for adding repositories
          become: yes
          package:
            name:
              - ca-certificates
              - curl
              - gnupg
              - lsb-release
              - python3-venv
              - python3-pip
            state: present

        - name: Install Podman from official Ubuntu repositories (22.04+)
          become: yes
          package:
            name:
              - podman
              - buildah
              - skopeo
            state: present
          when: ansible_distribution_version is version('22.04', '>=')

        - name: Install Podman from Kubic repository (older Ubuntu)
          block:
            - name: Add Kubic repository key
              become: yes
              apt_key:
                url: "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_{{ ansible_distribution_version }}/Release.key"
                state: present

            - name: Add Kubic repository
              become: yes
              apt_repository:
                repo: "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_{{ ansible_distribution_version }}/ /"
                state: present
                update_cache: yes

            - name: Install Podman
              become: yes
              package:
                name: podman
                state: present
          when: ansible_distribution_version is version('22.04', '<')

        - name: Install podman-compose for Ubuntu 24.04+ (PEP 668 compliant)
          block:
            - name: Check if podman-compose already exists
              become: yes
              stat:
                path: /usr/local/bin/podman-compose
              register: podman_compose_exists

            - name: Install podman-compose using pipx method
              block:
                - name: Install pipx
                  become: yes
                  package:
                    name: pipx
                    state: present

                - name: Ensure pipx path is set
                  command: pipx ensurepath
                  become: no
                  become_user: "{{ ansible_user }}"
                  changed_when: false

                - name: Install podman-compose via pipx
                  command: pipx install podman-compose
                  become: no
                  become_user: "{{ ansible_user }}"
                  args:
                    creates: "/home/{{ ansible_user }}/.local/bin/podman-compose"
                  register: pipx_install

                - name: Create symlink for podman-compose to be available system-wide
                  become: yes
                  file:
                    src: "/home/{{ ansible_user }}/.local/bin/podman-compose"
                    dest: "/usr/local/bin/podman-compose"
                    state: link
                  when: pipx_install is succeeded
              when: not podman_compose_exists.stat.exists
              rescue:
                - name: Fallback - Download podman-compose directly
                  get_url:
                    url: https://raw.githubusercontent.com/containers/podman-compose/main/podman_compose.py
                    dest: /usr/local/bin/podman-compose
                    mode: '0755'
                  when: not podman_compose_exists.stat.exists
          when: ansible_distribution_version is version('24.04', '>=')

        - name: Install podman-compose for older Ubuntu versions
          become: yes
          pip:
            name: podman-compose
            state: present
            executable: pip3
          when: ansible_distribution_version is version('24.04', '<')
      when: ansible_os_family == "Debian"

    - name: Create working directory
      file:
        path: "{{ working_directory }}"
        state: directory
        mode: '0755'
      tags: deploy

    - name: Copy compose.yml to working directory
      copy:
        src: "{{ compose_file_path }}"
        dest: "{{ working_directory }}/compose.yml"
        mode: '0644'
        force: yes
      tags: deploy

    - name: Getting compose copied file
      command: cat {{ working_directory }}/compose.yml
      register: compose_content
      tags: deploy

    - name: Display compose file content
      debug:
        msg: "{{ compose_content.stdout }}"
      tags: deploy

    - name: Copy realm-durvalcrm.json to working directory
      copy:
        src: "{{ realm_file_path }}"
        dest: "{{ working_directory }}/realm-durvalcrm.json"
        mode: '0644'
        force: yes
      tags: deploy

    - name: Create keycloak themes directory
      file:
        path: "{{ working_directory }}/keycloak/themes"
        state: directory
        mode: '0755'
      tags: deploy

    - name: Create postgres init directory
      file:
        path: "{{ working_directory }}/postgres"
        state: directory
        mode: '0755'
      tags: deploy

    - name: Create PostgreSQL init.sql file
      copy:
        content: |
          -- Initial database setup
          -- This file will be executed when PostgreSQL container starts for the first time
          
          -- Create schema if needed
          CREATE SCHEMA IF NOT EXISTS public;
          
          -- Grant permissions
          GRANT ALL ON SCHEMA public TO durvalcrm_user;
        dest: "{{ working_directory }}/postgres/init.sql"
        mode: '0644'
      tags: deploy

    - name: Stop existing services if running
      command: podman-compose down
      args:
        chdir: "{{ working_directory }}"
      ignore_errors: yes
      tags: deploy

    - name: Start PostgreSQL service first
      shell: podman-compose up -d postgres-db
      args:
        chdir: "{{ working_directory }}"
      async: 120
      poll: 10
      register: postgres_result
      tags: deploy

    - name: Wait for PostgreSQL to be ready
      shell: podman-compose exec postgres-db pg_isready -U durvalcrm_user -d durvalcrm_dev
      args:
        chdir: "{{ working_directory }}"
      register: postgres_ready
      until: postgres_ready.rc == 0
      retries: 30
      delay: 5
      ignore_errors: yes
      tags: deploy

    - name: Start Keycloak service
      shell: podman-compose up -d keycloak
      args:
        chdir: "{{ working_directory }}"
      async: 180
      poll: 10
      register: keycloak_result
      tags: deploy

    - name: Start API service
      shell: podman-compose up -d durvalcrm-api
      args:
        chdir: "{{ working_directory }}"
      async: 60
      poll: 5
      register: api_result
      when: postgres_ready.rc == 0
      tags: deploy

    - name: Display service status
      command: podman-compose ps
      args:
        chdir: "{{ working_directory }}"
      register: service_status
      tags: deploy

    - name: Show running services
      debug:
        var: service_status.stdout_lines
      tags: deploy

    - name: Wait for services to be ready
      pause:
        seconds: 10
      tags: deploy

    - name: Final service verification
      command: podman-compose ps
      args:
        chdir: "{{ working_directory }}"
      register: final_status
      tags: deploy

    - name: Show final service status
      debug:
        var: final_status.stdout_lines
      tags: deploy